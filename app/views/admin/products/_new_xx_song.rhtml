<%=
options = {:action => 'save'}
if @product.persisted?
  options[:id] = @product
end
form_tag(options, :multipart => true)
 %>
<% if @product.persisted? %>

  <!-- top right, only if persisted --> 
  <div style="float:right;"><%= submit_tag 'Save this Song', :disable_with => 'Saving...', :class => 'button hundredthirty' %>
       <%= link_to(
        '(View song page on site)',
        {
          :controller => '/music', # our addy
          :action => 'show',
          :id => @product.code
        }, :target => '_blank'
        )
       %>
       <br/>
  <div style="width: 100px;">
    <br/>
     <%= link_to 'Delete This Song', {:action => 'destroy', :id => @product}, :confirm => "Are you sure you want to delete #{@product.code} [you cannot undo this]?", :class => 'action' %>

  </div>
  </div>
<% end %>

<div id="left">

<hr/>
  <h1><%= @title %></h1>
<% if @product.persisted? %>
  <%=link_to '&lt;&lt;&lt; (Back to instructions page if you wish to enter another new song)', :controller => '/content_nodes', :action => 'show_by_name', :name => 'self-upload' %>
<% else %>
  <%=link_to '&lt;&lt;&lt; (Back to instructions page)', :controller => '/content_nodes', :action => 'show_by_name', :name => 'self-upload' %>
<% end %>
<br/>

<h2>Step 1) Song Information</h2>
<%= error_messages_for 'product' %>

		<div class="float">
			<%= make_label('Song Name:') %>
                        <% if have_name || @product.persisted? %>
		  	  <%= text_field 'product', 'name', :class => 'textInput', :size => 60  %>
                        <% else %>
                          Since this is an arrangement, song name is automatically assigned as the name of the hymn it arranges.  You can change the name later if desired.
                        <% end %>
<br/>
<br/>
		</div>
		<div class="float">
		<%= make_label('Website URL (if you have a website) address of your song--like http://yourwebsitename.com/SONG_NAME.html</b> or http://yourwebsitename.com/all_songs_list.html -- wherever that song is listed, on your site) [optional]:') %>
			<%= text_field 'product', 'original_url', :class => 'textInput', :size => 100, :placeholder => 'http://yourwebsite.com/song_page.html...'  %> <%= "<a href=#{@product.original_url} target=\"_blank\">Visit original url</a>" if @product.original_url.present? %>
		</div>
                <br/>

<br/>
<div class="float">
        <%= make_label('Description/song history/initial inspiration [optional]:') %>
	<%= text_area 'product', 'description', :rows => 5, :class => 'textArea', :style => 'width:670px;'  %>
</div>
<% if have_name %>
               <div class="float">
                 <%= make_label('Song Lyrics [optional]:') %>
                 <%= text_area 'product', 'lyrics', :rows => 3, :class => 'textArea', :style => 'width:670px;'  %>
               </div>
<% else %>
<div class="clear"></div>
                 (You don't have to enter lyrics for this song since it is an arrangement song.)
<% end %>
<div class="clear"></div>

<script type="text/javascript">
<!--
  var PRODUCT = {
    variation_boxes: null,
    original_price: 0,
    set_variation_boxes: function() {
      PRODUCT.variation_boxes = $$("input[name='variation[][price]']");
    },
    // Watches product price box.
    // When value of price changes, it changes price of all variations 
    // that equal the original value.
    change_price: function() {
      var p_input = $('product_price')
      var price = p_input.value;
      PRODUCT.variation_boxes.each(function(box){
        box_price = box.value;
        box_orig = parseFloat(box.getAttribute('original_value'), 10);
        if (box_orig == parseFloat(PRODUCT.original_price,10) || box_orig == 0.0) {
          box.value = price;
        };
      });
      PRODUCT.color_variation_boxes;
    },
    // Marks variation boxes with same price as original,
    // and ones that differ.
    color_variation_boxes: function() {
      var p_input = $('product_price')
      var price = parseFloat(p_input.value,10);
      PRODUCT.variation_boxes.each(function(box){
        box_price = parseFloat(box.value, 10);
        if (price == box_price) {
          box.style.color = '#999999';
          box.style.backgroundColor = '#eee';
        } else {
          box.style.color = '';
          box.style.backgroundColor = '';
        }
      });
    },
    // Shortcut
    set_and_color_boxes: function() {
      PRODUCT.set_variation_boxes();
      PRODUCT.change_price();
      PRODUCT.color_variation_boxes();
      PRODUCT.observe_boxes();
    },
    // Observes variations and recolors them if they differ from the norm.
    // Kind of inefficient scripting wise, but we probably aren't
    // dealing with products that have 100's of variations.
    observe_boxes: function() {
      PRODUCT.variation_boxes.each(function(box){
        Event.observe(box, 'keyup', PRODUCT.color_variation_boxes);
      });
    },
    add_variation_loading: function() {
      $('add_variation_link').hide(); 
      $('add_variation_indicator').show();
    },
    add_variation_complete: function() {
      PRODUCT.set_and_color_boxes();
      PRODUCT.make_variations_sortable();
      $('add_variation_link').show(); 
      $('add_variation_indicator').hide();
    },
    // Creates sortable on the variations container so we can drag/drop them
    make_variations_sortable: function() {
      Sortable.create(
        'variation_container',
        {
          tag: 'div',
          onUpdate: PRODUCT.update_variation_rank
        }
      );
    },
    // Run when variation is dragged / dropped.
    // Updates the hidden input for rank on the variation,
    // which is saved on product save.
    update_variation_rank: function(container) {
      var sort_items = container.select("div.variation.sort_item");
      for (var i=0; i<sort_items.length; i++) {
        variation = sort_items[i];
        rank_box = variation.select("input[name='variation[][variation_rank]']")[0];
        rank_box.value = i;
      }
    },
    // Adds event handlers to variation boxes
    init: function() {
      PRODUCT.original_price = $('product_price').getAttribute('original_value');
      Event.observe($('product_price'), 'keyup', PRODUCT.change_price);
      PRODUCT.set_and_color_boxes();
      PRODUCT.observe_boxes();
      PRODUCT.make_variations_sortable();
    }
  };
  PRODUCT.init();
//-->
</script>
<% if @product.persisted? %>
		<div class="float">
			<%= make_label('Song Code (you shouldnt have to change this typically it is auto generated the first time ou save a song, unless you change the voicing and want the new voicing auto-listed instead, in which case change it to blank, but it is modifiable):') %>
			<%= text_field 'product', 'code', :class => 'textInput', :size => 75 %>
		</div>
<br/>
<br/>
<% end %>
   <div class="float" >
      <%= make_label('Youtube video id (like JW5meKfy3fY or http://youtube...) if it has one [optional]:') %>
      <%= text_field 'product', 'youtube_video_id', :class => 'textInput', :size => 30  %>
   </div>
<br/>
<br>
<br>
<br>

<%= render :partial => 'product_upload' %>
<%= render :partial => 'image_upload' %>
<input type="hidden" name="using_edit_song_easy" value="yep">

<div id="right" style="width: 625px;">
<h1>Step 4) Describe This Song</h1>
(Check all that apply)

